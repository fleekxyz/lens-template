var t = require("wonka");

var e = require("@urql/core");

function _extends() {
  return (_extends = Object.assign || function(t) {
    for (var e = 1; e < arguments.length; e++) {
      var r = arguments[e];
      for (var n in r) {
        if (Object.prototype.hasOwnProperty.call(r, n)) {
          t[n] = r[n];
        }
      }
    }
    return t;
  }).apply(this, arguments);
}

function addAuthAttemptToOperation(t, r) {
  return e.makeOperation(t.kind, t, _extends({}, t.context, {
    authAttempt: r
  }));
}

exports.authExchange = function authExchange(r) {
  var n = r.addAuthToOperation;
  var a = r.getAuth;
  var u = r.didAuthError;
  var o = r.willAuthError;
  return function(r) {
    var i = r.client;
    var f = r.forward;
    var h = new Map;
    var c = t.makeSubject();
    var p = c.source;
    var d = c.next;
    var v = null;
    return function(r) {
      function mutate(r, n, a) {
        var u = i.createRequestOperation("mutation", e.createRequest(r, n), a);
        return t.toPromise(t.take(1)(t.filter((function(t) {
          return t.operation.key === u.key;
        }))(t.onStart((function() {
          return d(u);
        }))(k))));
      }
      function updateAuthState(t) {
        v = t;
        c = void 0;
        h.forEach(d);
        h.clear();
      }
      var c = Promise.resolve().then((function() {
        return a({
          authState: v,
          mutate: mutate
        });
      })).then(updateAuthState);
      function refreshAuth(t) {
        t = addAuthAttemptToOperation(t, !0);
        h.set(t.key, t);
        if (!c) {
          c = a({
            authState: v,
            mutate: mutate
          }).then(updateAuthState).catch((function() {
            return updateAuthState(null);
          }));
        }
      }
      var m = t.share(r);
      var s = t.filter((function(t) {
        return "teardown" === t.kind;
      }))(m);
      var l = t.filter((function(t) {
        return "teardown" !== t.kind;
      }))(m);
      var A = t.map((function(t) {
        return n({
          operation: t,
          authState: v
        });
      }))(t.merge([ p, t.mergeMap((function(e) {
        if (h.has(e.key)) {
          return t.empty;
        }
        if (!c && o && o({
          operation: e,
          authState: v
        })) {
          refreshAuth(e);
          return t.empty;
        } else if (!c) {
          return t.fromValue(addAuthAttemptToOperation(e, !1));
        }
        var r = t.filter((function(t) {
          return "teardown" === t.kind && t.key === e.key;
        }))(m);
        return t.takeUntil(r)(t.map((function() {
          return addAuthAttemptToOperation(e, !1);
        }))(t.fromPromise(c)));
      }))(l) ]));
      var k = t.share(f(t.merge([ A, s ])));
      return t.filter((function(t) {
        var e = t.error;
        var r = t.operation;
        if (e && u && u({
          error: e,
          authState: v
        })) {
          if (!r.context.authAttempt) {
            refreshAuth(r);
            return !1;
          }
        }
        return !0;
      }))(k);
    };
  };
};
//# sourceMappingURL=urql-exchange-auth.js.map
