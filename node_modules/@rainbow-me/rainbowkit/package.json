{
  "name": "@rainbow-me/rainbowkit",
  "version": "0.1.0",
  "description": "The best way to connect a wallet",
  "files": [
    "dist"
  ],
  "type": "module",
  "exports": {
    ".": "./dist/index.js",
    "./styles.css": "./dist/index.css"
  },
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "sideEffects": [
    "src/css/reset.css.ts"
  ],
  "engines": {
    "node": ">=12.4"
  },
  "keywords": [
    "ens",
    "ethereum",
    "react",
    "react-hook",
    "hooks",
    "blockchain"
  ],
  "author": "Rainbow",
  "license": "MIT",
  "peerDependencies": {
    "react": ">=17",
    "react-dom": ">=17",
    "wagmi": "^0.3.2"
  },
  "devDependencies": {
    "@ethersproject/abstract-provider": "^5.5.1",
    "@types/qrcode": "^1.4.2",
    "@vanilla-extract/private": "^1.0.2",
    "autoprefixer": "^10.4.0",
    "nock": "^13.2.4",
    "postcss": "^8.4.4",
    "react": "^18.0.0",
    "vitest": "^0.5.0"
  },
  "dependencies": {
    "@ethersproject/providers": "^5.5.1",
    "@vanilla-extract/css": "^1.6.6",
    "@vanilla-extract/dynamic": "^2.0.2",
    "@vanilla-extract/sprinkles": "^1.4.0",
    "clsx": "^1.1.1",
    "detect-browser": "^5.3.0",
    "focus-visible": "^5.2.0",
    "qrcode": "^1.5.0",
    "react-remove-scroll": "^2.4.4"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rainbow-me/rainbowkit.git",
    "directory": "packages/rainbowkit"
  },
  "scripts": {
    "build": "node build.js",
    "build:watch": "node build.js --watch",
    "dev": "pnpm build:watch & pnpm typegen:watch",
    "prebuild": "pnpm typegen",
    "typecheck": "pnpm tsc --noEmit",
    "typegen": "tsc --emitDeclarationOnly || true",
    "typegen:watch": "tsc --emitDeclarationOnly --watch"
  },
  "readme": "# RainbowKit\n\n**The best way to connect a wallet 🌈**\n\n- 🔥 Out-of-the-box wallet management\n- ✅ Easily customizable\n- 🦄 Built on top of [wagmi](https://github.com/tmm/wagmi) and [ethers](https://docs.ethers.io)\n\n## Installation\n\nInstall RainbowKit along with [wagmi](https://wagmi.sh) and its [ethers](https://docs.ethers.io) peer dependency.\n\n`npm install @rainbow-me/rainbowkit wagmi ethers`\n\n## Getting started\n\nTo start, import RainbowKit’s base styles, configure your wallets and desired chains, generate the required connectors, then wrap your application with `RainbowKitProvider` and [`WagmiProvider`](https://wagmi.sh/docs/provider).\n\n```tsx\nimport '@rainbow-me/rainbowkit/styles.css';\n\nimport {\n  apiProvider,\n  configureChains,\n  RainbowKitProvider,\n  getDefaultWallets,\n} from '@rainbow-me/rainbowkit';\nimport { createClient, chain, WagmiProvider } from 'wagmi';\nimport { providers } from 'ethers';\n\nconst { provider, chains } = configureChains(\n  [chain.mainnet],\n  [apiProvider.alchemy(process.env.ALCHEMY_ID), apiProvider.fallback()]\n);\n\nconst { connectors } = getDefaultWallets({\n  appName: 'My RainbowKit App',\n  chains,\n});\n\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors,\n  provider,\n});\n\nconst App = () => {\n  return (\n    <WagmiProvider client={wagmiClient}>\n      <RainbowKitProvider chains={chains}>\n        <YourApp />\n      </RainbowKitProvider>\n    </WagmiProvider>\n  );\n};\n```\n\nThen, in your app, import RainbowKit’s `ConnectButton` component.\n\n```tsx\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  return (\n    <>\n      <ConnectButton />\n    </>\n  );\n};\n```\n\nYou’re done! RainbowKit will now handle your user’s wallet selection, display wallet/transaction information and handle network/wallet switching.\n\n### Customizing `ConnectButton`\n\nThe `ConnectButton` component exposes several props to customize its appearance by toggling the visibility of different elements.\n\nThese props can also be defined in a responsive format, e.g. `showBalance={{ smallScreen: false, largeScreen: true }}`, allowing you to customize its appearance across different screen sizes. Note that the built-in `\"largeScreen\"` breakpoint is `768px`.\n\n<table>\n  <thead>\n    <tr>\n    <th>Prop</th>\n    <th>Type</th>\n    <th>Default</th>\n    <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>accountStatus</code></td>\n      <td><code>\"avatar\" | \"address\" | \"full\" | { smallScreen: AccountStatus, largeScreen?: AccountStatus }</code></td>\n      <td><code>\"full\"</code></td>\n      <td>Whether the active account’s avatar and/or address is displayed</td>\n    </tr>\n    <tr>\n      <td><code>chainStatus</code></td>\n      <td><code>\"icon\" | \"name\" | \"full\" | \"none\" | { smallScreen: ChainStatus, largeScreen?: ChainStatus }</code></td>\n      <td><code>{ smallScreen: \"icon\", largeScreen: \"full\" }</code></td>\n      <td>Whether the current chain’s icon and/or name is displayed, or hidden entirely</td>\n    </tr>\n    <tr>\n      <td><code>showBalance</code></td>\n      <td><code>boolean | { smallScreen: boolean, largeScreen?: boolean }</code></td>\n      <td><code>{ smallScreen: false, largeScreen: true }</code></td>\n      <td>Whether the balance is visible next to the account name</td>\n    </tr>\n  </tbody>\n</table>\n\n### Choosing a theme\n\nRainbowKit ships with a static CSS file that can be themed via CSS variables, which `RainbowKitProvider` provides as inline styles by default.\n\n#### Built-in themes\n\nThere are 3 built-in themes:\n\n- `lightTheme` (default)\n- `darkTheme`\n- `midnightTheme`\n\nThese themes are implemented as functions where the resulting theme object can be passed to the `theme` prop on `RainbowKitProvider`.\n\n```tsx\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider theme={darkTheme()} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n### Configuring chains\n\nRainbowKit has built-in Ethereum API provider support so you don't have to worry about defining RPC URLs & a provider instance to pass to `wagmi`.\n\n#### Alchemy\n\nTo configure the chains with Alchemy configuration, provide `apiProvider.alchemy` to `configureChains`.\n\n```tsx\nimport { apiProvider, configureChains } from '@rainbow-me/rainbowkit';\n\n...\n\nconst { provider, chains } = configureChains(\n  [chain.mainnet, chain.polygon],\n  [\n    apiProvider.alchemy(process.env.ALCHEMY_ID),\n    apiProvider.fallback()\n  ]\n);\n```\n\n#### Infura\n\nTo configure the chains with Infura configuration, provide `apiProvider.infura` to `configureChains`.\n\n```tsx\nimport { apiProvider, configureChains } from '@rainbow-me/rainbowkit';\n\n...\n\nconst { provider, chains } = configureChains(\n  [chain.mainnet, chain.polygon],\n  [\n    apiProvider.infura(process.env.INFURA_ID),\n    apiProvider.fallback()\n  ]\n);\n```\n\n#### JSON RPC\n\nTo configure the chains with your own RPC URLs, provide `apiProvider.jsonRpc` to `configureChains` with the chain's RPC URLs.\n\n```tsx\nimport { apiProvider } from '@rainbow-me/rainbowkit';\n\n...\n\nconst { provider, chains } = configureChains(\n  [chain.mainnet, chain.polygon],\n  [apiProvider.jsonRpc(chain => ({\n    rpcUrl: `https://${chain.id}.example.com`\n  }))]\n);\n```\n\n#### Fallback RPC\n\nTo configure the chains with their respective [**fallback (public) RPC URLs**](https://github.com/tmm/wagmi/blob/main/packages/core/src/constants/chains.ts#L44), provide `apiProvider.fallback` to `configureChains`.\n\n```tsx\nimport { apiProvider, configureChains } from '@rainbow-me/rainbowkit';\n\n...\n\nconst { provider, chains } = configureChains(\n  [chain.mainnet, chain.polygon],\n  [apiProvider.fallback()]\n);\n```\n\n> Note: Only having `apiProvider.fallback` in your API providers could lead to rate-limiting. It is recommended to also include `apiProvider.alchemy`, `apiProvider.infura` or `apiProvider.jsonRpc`.\n\n#### Multiple API providers\n\nYou can also pass through more than one API provider to `configureChains`. This is useful if not all your chains support a single API provider. For instance, you may want to use Alchemy for Ethereum, and `avax.network` for Avalanche.\n\n```tsx\nimport { apiProvider, configureChains } from '@rainbow-me/rainbowkit';\nimport { Chain } from 'wagmi';\n\n...\n\nconst avalancheChain: Chain = {\n  id: 43_114,\n  name: 'Avalanche',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Avalanche',\n    symbol: 'AVAX',\n  },\n  rpcUrls: {\n    default: 'https://api.avax.network/ext/bc/C/rpc',\n  },\n  blockExplorers: {\n    default: { name: 'SnowTrace', url: 'https://snowtrace.io' },\n    snowtrace: { name: 'SnowTrace', url: 'https://snowtrace.io' },\n  },\n  testnet: false,\n};\n\nconst { provider, chains } = configureChains(\n  [chain.mainnet, avalancheChain],\n  [\n    apiProvider.alchemy(process.env.ALCHEMY_ID),\n    apiProvider.jsonRpc(chain => ({ rpcUrl: chain.rpcUrls.default }))\n  ]\n);\n```\n\n### Customizing chains\n\nThe `chains` prop on `RainbowKitProvider` defines which chains are available for the user to select.\n\nRainbowKit is designed to integrate with [wagmi’s `chain` object](https://wagmi.sh/docs/constants/chains#chain) which currently provides the following chains:\n\n- `chain.mainnet`\n- `chain.ropsten`\n- `chain.rinkeby`\n- `chain.goerli`\n- `chain.kovan`\n- `chain.optimism`\n- `chain.optimismKovan`\n- `chain.polygon`\n- `chain.polygonMumbai`\n- `chain.arbitrum`\n- `chain.arbitrumRinkeby`\n- `chain.localhost`\n- `chain.hardhat`\n\n> For more detail about the `chain` object, or to see examples when creating a custom chain definition, see the [source code for wagmi’s `chain` object](https://github.com/tmm/wagmi/blob/main/packages/core/src/constants/chains.ts).\n\nYour chain config can be defined in a single array provided to [`configureChains`](/docs/configure-chains).\n\n```tsx\nimport {\n  apiProvider,\n  configureChains,\n  RainbowKitProvider,\n  Chain,\n} from '@rainbow-me/rainbowkit';\nimport { chain } from 'wagmi';\n\nconst { chains } = configureChains(\n  [chain.mainnet, chain.polygon],\n  [apiProvider.alchemy(process.env.ALCHEMY_ID), apiProvider.fallback()]\n);\n\nconst App = () => {\n  return (\n    <RainbowKitProvider chains={chains} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\nSeveral chain icons are provided by default, but you can customize the icon for each chain using the iconUrl property.\n\n```tsx\nconst { chains } = configureChains(\n  [\n    {\n      ...chain.mainnet,\n      iconUrl: 'https://example.com/icons/ethereum.png',\n      iconBackground: 'grey',\n    },\n    {\n      ...chain.polygon,\n      iconUrl: 'https://example.com/icons/polygon.png',\n      iconBackground: '#7b3fe4',\n    },\n  ],\n  [apiProvider.alchemy(process.env.ALCHEMY_ID), apiProvider.fallback()]\n);\n```\n\n### Customizing the built-in themes\n\nThe built-in theme functions also accept an options object, allowing you to select from several different visual styles.\n\n<table>\n  <thead>\n    <tr>\n      <th>Option</th>\n      <th>Type</th>\n      <th>Default</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>accentColor</code></td>\n      <td><code>string</code></td>\n      <td><code>\"#0E76FD\"</code></td>\n      <td>The background/text color of various interactive elements.</td>\n    </tr>\n    <tr>\n      <td><code>accentColorForeground</code></td>\n      <td><code>string</code></td>\n      <td><code>\"white\"</code></td>\n      <td>The color used for foreground elements rendered on top of the accent color.</td>\n    </tr>\n    <tr>\n      <td><code>borderRadius</code></td>\n      <td><code>\"none\" | \"small\" | \"medium\" | \"large\"</code></td>\n      <td><code>\"large\"</code></td>\n      <td>The size of the entire border radius scale</td>\n    </tr>\n    <tr>\n      <td><code>fontStack</code></td>\n      <td><code>\"rounded\" | \"system\"</code></td>\n      <td><code>\"rounded\"</code></td>\n      <td>The font stack used throughout the UI. Note that ‘rounded’ attempts to use <a href=\"https://developer.apple.com/fonts\">SF Pro Rounded,</a> falling back to system fonts when it isn’t available.</td>\n    </tr>\n  </tbody>\n</table>\n\nFor example, to customize the dark theme with a purple accent color and a `medium` border radius scale:\n\n```tsx\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      theme={darkTheme({\n        accentColor: '#7b3fe4',\n        accentColorForeground: 'white',\n        borderRadius: 'medium',\n      })}\n      {...etc}\n    >\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\nEach theme also provides several accent color presets (`blue`, `green`, `orange`, `pink`, `purple`, `red`) that can be spread into the options object. For example, to use the `pink` accent color preset:\n\n```tsx\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      theme={darkTheme({\n        ...darkTheme.accentColors.pink,\n      })}\n    >\n      {/* Your App */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n#### Dark mode support\n\nIf your app uses the standard `prefers-color-mode: dark` media query to swap between light and dark modes, you can optionally provide a dynamic theme object containing `lightMode` and `darkMode` values.\n\n```tsx\nimport {\n  RainbowKitProvider,\n  lightTheme,\n  darkTheme,\n} from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      theme={{\n        lightMode: lightTheme(),\n        darkMode: darkTheme(),\n      }}\n      {...etc}\n    >\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n### Showing recent transactions\n\nYou can opt in to displaying recent transactions within RainbowKit’s account modal. Note that all transactions are kept in local storage and must be manually registered with RainbowKit in order to be displayed.\n\nThe default `ConnectButton` implementation will also display a loading indicator around the user’s avatar if there are any pending transactions. Custom `ConnectButton` implementations can recreate this behavior via the `account.hasPendingTransactions` property that is passed to your render function.\n\nTo use this feature, first enable the `showRecentTransactions` option on `RainbowKitProvider`.\n\n```tsx\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider showRecentTransactions={true} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\nTransactions can then be registered with RainbowKit using the `useAddRecentTransaction` hook.\n\n```tsx\nimport { useAddRecentTransaction } from '@rainbow-me/rainbowkit';\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: '0x...',\n          description: '...',\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\nOnce a transaction has been registered with RainbowKit, its status will be updated upon completion.\n\nBy default the transaction will be considered completed once a single block has been mined on top of the block in which the transaction was mined, but this can be configured by specifying a custom `confirmations` value.\n\n```tsx\nimport { useAddRecentTransaction } from '@rainbow-me/rainbowkit';\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: '0x...',\n          description: '...',\n          confirmations: 100,\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n## Advanced usage\n\n### Creating a custom `ConnectButton`\n\nIf you want to create your own custom connection buttons, the low-level `ConnectButton.Custom` component is also provided which accepts a render prop, i.e. a function as a child. This function is passed everything needed to re-implement the built-in buttons.\n\nA minimal re-implementation of the built-in buttons would look something like this:\n\n```tsx\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  return (\n    <ConnectButton.Custom>\n      {({\n        account,\n        chain,\n        openAccountModal,\n        openChainModal,\n        openConnectModal,\n        mounted,\n      }) => {\n        return (\n          <div\n            {...(!mounted && {\n              'aria-hidden': true,\n              'style': {\n                opacity: 0,\n                pointerEvents: 'none',\n                userSelect: 'none',\n              },\n            })}\n          >\n            {(() => {\n              if (!mounted || !account || !chain) {\n                return (\n                  <button onClick={openConnectModal} type=\"button\">\n                    Connect Wallet\n                  </button>\n                );\n              }\n\n              if (chain.unsupported) {\n                return (\n                  <button onClick={openChainModal} type=\"button\">\n                    Wrong network\n                  </button>\n                );\n              }\n\n              return (\n                <div style={{ display: 'flex', gap: 12 }}>\n                  <button\n                    onClick={openChainModal}\n                    style={{ display: 'flex', alignItems: 'center' }}\n                    type=\"button\"\n                  >\n                    {chain.hasIcon && (\n                      <div\n                        style={{\n                          background: chain.iconBackground,\n                          width: 12,\n                          height: 12,\n                          borderRadius: 999,\n                          overflow: 'hidden',\n                          marginRight: 4,\n                        }}\n                      >\n                        {chain.iconUrl && (\n                          <img\n                            alt={chain.name ?? 'Chain icon'}\n                            src={chain.iconUrl}\n                            style={{ width: 12, height: 12 }}\n                          />\n                        )}\n                      </div>\n                    )}\n                    {chain.name}\n                  </button>\n\n                  <button onClick={openAccountModal} type=\"button\">\n                    {account.displayName}\n                    {account.displayBalance\n                      ? ` (${account.displayBalance})`\n                      : ''}\n                  </button>\n                </div>\n              );\n            })()}\n          </div>\n        );\n      }}\n    </ConnectButton.Custom>\n  );\n};\n```\n\nThe following props are passed to your render function.\n\n#### Account properties\n\n<table>\n  <thead>\n    <tr>\n    <th>Property</th>\n    <th width=\"150\">Type</th>\n    <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>account</code></td>\n      <td><code>object | undefined</code></td>\n      <td>Object containing details about the current account, described below</td>\n    </tr>\n    <tr>\n      <td><code>account.address</code></td>\n      <td><code>string</code></td>\n      <td>The full account address, e.g. <code>\"0x7a3d05c70581bD345fe117c06e45f9669205384f\"</code></td>\n    </tr>\n    <tr>\n      <td><code>account.balanceDecimals</code></td>\n      <td><code>number | undefined</code></td>\n      <td>The account balance in decimals</td>\n    </tr>\n    <tr>\n      <td><code>account.balanceFormatted</code></td>\n      <td><code>string | undefined</code></td>\n      <td>The account balance formatted as a string, e.g. <code>\"1.234567890123456789\"</code></td>\n    </tr>\n    <tr>\n      <td><code>account.balanceSymbol</code></td>\n      <td><code>string | undefined</code></td>\n      <td>The currency symbol for the balance, e.g. <code>\"ETH\"</code></td>\n    </tr>\n    <tr>\n      <td><code>account.displayBalance</code></td>\n      <td><code>string | undefined</code></td>\n      <td>The balance formatted to 3 significant digits, plus the symbol, e.g. <code>\"1.23 ETH\"</code></td>\n    </tr>\n    <tr>\n      <td><code>account.displayName</code></td>\n      <td><code>string</code></td>\n      <td>The ENS name, or a truncated version of the address, e.g. \n      <code>\"rainbowwallet.eth\"</code> or <code>\"0x7a…384f\"</code></td>\n    </tr>\n    <tr>\n      <td><code>account.ensAvatar</code></td>\n      <td><code>string | undefined</code></td>\n      <td>The ENS avatar URI</td>\n    </tr>\n    <tr>\n      <td><code>account.ensName</code></td>\n      <td><code>string | undefined</code></td>\n      <td>The ENS name, e.g. <code>\"rainbowwallet.eth\"</code></td>\n    </tr>\n    <tr>\n      <td><code>account.hasPendingTransactions</code></td>\n      <td><code>boolean</code></td>\n      <td>Boolean indicating whether the account has pending transactions for the current chain</td>\n    </tr>\n  </tbody>\n</table>\n\n#### Chain properties\n\n<table>\n  <thead>\n    <tr>\n    <th>Property</th>\n    <th width=\"150\">Type</th>\n    <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>chain</code></td>\n      <td><code>object | undefined</code></td>\n      <td>Object containing details about the current chain, described below</code></td>\n    </tr>\n    <tr>\n      <td><code>chain.hasIcon</code></td>\n      <td><code>boolean</code></td>\n      <td>Whether the chain as an icon specified</td>\n    </tr>\n    <tr>\n      <td><code>chain.iconUrl</code></td>\n      <td><code>string | undefined</code></td>\n      <td>The chain icon URL (which may be also be undefined while downloading Base64 data URLs)</td>\n    </tr>\n    <tr>\n      <td><code>chain.iconBackground</code></td>\n      <td><code>string | undefined</code></td>\n      <td>The chain icon background which will be visible while images are loading</td>\n    </tr>\n    <tr>\n      <td><code>chain.id</code></td>\n      <td><code>number</code></td>\n      <td>The chain ID, e.g. <code>1</code></td>\n    </tr>\n    <tr>\n      <td><code>chain.name</code></td>\n      <td><code>string | undefined</code></td>\n      <td>The chain name, e.g. <code>\"Ethereum\"</code></td>\n    </tr>\n    <tr>\n      <td><code>chain.unsupported</code></td>\n      <td><code>boolean | undefined</code></td>\n      <td>Boolean indicating whether the current chain is unsupported</td>\n    </tr>\n  </tbody>\n</table>\n\n#### Modal state properties\n\n<table>\n  <thead>\n    <tr>\n    <th>Property</th>\n    <th width=\"150\">Type</th>\n    <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>openAccountModal</code></td>\n      <td><code>() => void</code></td>\n      <td>Function to open the account modal</td>\n    </tr>\n    <tr>\n      <td><code>openChainModal</code></td>\n      <td><code>() => void</code></td>\n      <td>Function to open the chain modal</td>\n    </tr>\n    <tr>\n      <td><code>openConnectModal</code></td>\n      <td><code>() => void</code></td>\n      <td>Function to open the connect modal</td>\n    </tr>\n    <tr>\n      <td><code>accountModalOpen</code></td>\n      <td><code>boolean</code></td>\n      <td>Boolean indicating whether the account modal is open</td>\n    </tr>\n    <tr>\n      <td><code>mounted</code></td>\n      <td><code>boolean</code></td>\n      <td>Boolean indicating whether the component has mounted</td>\n    </tr>\n    <tr>\n      <td><code>chainModalOpen</code></td>\n      <td><code>boolean</code></td>\n      <td>Boolean indicating whether the chain modal is open</td>\n    </tr>\n    <tr>\n      <td><code>connectModalOpen</code></td>\n      <td><code>boolean</code></td>\n      <td>Boolean indicating whether the connect modal is open</td>\n    </tr>\n  </tbody>\n</table>\n\n### Creating custom themes\n\n> ⚠️ Note: This API is unstable and likely to change in the near future. We recommend sticking with the built-in themes for now.\n\nWhile the built-in themes provide some level of customization, the `Theme` type is provided to help you define your own custom themes with lower-level access to the underlying theme variables.\n\n```tsx\nimport { RainbowKitProvider, Theme } from '@rainbow-me/rainbowkit';\n\nconst myCustomTheme: Theme = {\n  colors: {\n    accentColor: '...',\n    accentColorForeground: '...',\n    actionButtonBorder: '...',\n    actionButtonBorderMobile: '...',\n    actionButtonSecondaryBackground: '...',\n    closeButton: '...',\n    closeButtonBackground: '...',\n    connectButtonBackground: '...',\n    connectButtonBackgroundError: '...',\n    connectButtonInnerBackground: '...',\n    connectButtonText: '...',\n    connectButtonTextError: '...',\n    connectionIndicator: '...',\n    error: '...',\n    generalBorder: '...',\n    generalBorderDim: '...',\n    menuItemBackground: '...',\n    modalBackdrop: '...',\n    modalBackground: '...',\n    modalBorder: '...',\n    modalText: '...',\n    modalTextDim: '...',\n    modalTextSecondary: '...',\n    profileAction: '...',\n    profileActionHover: '...',\n    profileForeground: '...',\n    selectedOptionBorder: '...',\n    standby: '...',\n  },\n  fonts: {\n    body: '...',\n  },\n  radii: {\n    actionButton: '...',\n    connectButton: '...',\n    menuButton: '...',\n    modal: '...',\n    modalMobile: '...',\n  },\n  shadows: {\n    connectButton: '...',\n    dialog: '...',\n    walletLogo: '...',\n    profileDetailsAction: '...',\n    selectedOption: '...',\n    selectedWallet: '...',\n  },\n};\n\nconst App = () => {\n  return (\n    <RainbowKitProvider theme={myCustomTheme} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n### Creating custom theme selectors\n\nIf your app is server/statically rendered and allows users to manually toggle between themes, RainbowKit’s theming system can be hooked up to custom CSS selectors with the following functions that can be used with any CSS-in-JS system:\n\n- `cssStringFromTheme`\n- `cssObjectFromTheme`\n\nThese functions return CSS that sets all required theme variables. Since both strings and objects are supported, this can be integrated with any CSS-in-JS system.\n\nAs a basic example, you can render your own `style` element with custom selectors for each theme. Since we’re taking control of rendering the theme’s CSS, we’re passing `null` to the `theme` prop so that `RainbowKitProvider` doesn’t render any styles for us. Also note the use of the `extends` option on the `cssStringFromTheme` function which omits any theme variables that are the same as the base theme.\n\n```tsx\nimport {\n  RainbowKitProvider,\n  cssStringFromTheme,\n  lightTheme,\n  darkTheme,\n} from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider theme={null} {...etc}>\n      <style>\n        {`\n          :root {\n            ${cssStringFromTheme(lightTheme)}\n          }\n\n          html[data-dark] {\n            ${cssStringFromTheme(darkTheme, {\n              extends: lightTheme,\n            })}\n          }\n        `}\n      </style>\n\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n### Customizing the wallet list\n\n> ⚠️ Note: This API is unstable and likely to change in the near future. We recommend avoiding changes to the wallet list for now.\n\nThe following wallet options are presented by default via the `getDefaultWallets` function:\n\n- Rainbow\n- WalletConnect\n- Coinbase Wallet\n- MetaMask\n\nAn \"Injected Wallet\" fallback is also provided if `window.ethereum` exists and hasn’t been provided by another wallet.\n\nAll built-in wallets are available via the `wallet` object which allows you to rearrange/omit wallets as needed.\n\n```tsx\nimport { connectorsForWallets, wallet } from '@rainbow-me/rainbowkit';\n\nconst needsInjectedWalletFallback =\n  typeof window !== 'undefined' &&\n  window.ethereum &&\n  !window.ethereum.isMetaMask &&\n  !window.ethereum.isCoinbaseWallet;\n\nconst connectors = connectorsForWallets([\n  {\n    groupName: 'Suggested',\n    wallets: [\n      wallet.rainbow({ chains }),\n      wallet.walletConnect({ chains }),\n      wallet.coinbase({ appName: 'My RainbowKit App', chains }),\n      wallet.metaMask({ chains }),\n      ...(needsInjectedWalletFallback ? [wallet.injected({ chains })] : []),\n    ],\n  },\n]);\n```\n\n### Built-in wallets\n\nThe following wallets are provided via the `wallet` object (in alphabetical order).\n\n- [Argent](#argent)\n- [Coinbase Wallet](#coinbase-wallet)\n- [Injected Wallet](#injected-wallet)\n- [Ledger Live](#ledger)\n- [MetaMask](#metamask)\n- [Rainbow](#rainbow)\n- [Trust Wallet](#trust-wallet)\n- [WalletConnect](#walletconnect)\n\n#### Argent\n\n```tsx\nimport { wallet } from '@rainbow-me/rainbowkit';\n\nwallet.argent(options: {\n  chains: Chain[];\n});\n```\n\n#### Coinbase Wallet\n\n```tsx\nimport { wallet } from '@rainbow-me/rainbowkit';\n\nwallet.coinbase(options: {\n  appName: string;\n  chains: Chain[];\n});\n```\n\n#### Injected Wallet\n\nThis is a fallback wallet option designed for scenarios where `window.ethereum` exists but hasn’t been provided by another wallet in the list.\n\n```tsx\nimport { wallet } from '@rainbow-me/rainbowkit';\n\nwallet.injected(options: {\n  chains: Chain[];\n  shimDisconnect?: boolean;\n});\n```\n\nThis shouldn’t be used if another injected wallet is available. For example, when combined with MetaMask and Coinbase Wallet:\n\n```tsx\nimport { connectorsForWallets, wallet } from '@rainbow-me/rainbowkit';\n\nconst needsInjectedWalletFallback =\n  typeof window !== 'undefined' &&\n  window.ethereum &&\n  !window.ethereum.isMetaMask &&\n  !window.ethereum.isCoinbaseWallet;\n\nconst connectors = connectorsForWallets([\n  {\n    groupName: 'Suggested',\n    wallets: [\n      wallet.rainbow({ chains }),\n      wallet.walletConnect({ chains }),\n      wallet.coinbase({\n        chains,\n        appName: 'My RainbowKit App',\n      }),\n      wallet.metaMask({ chains }),\n      ...(needsInjectedWalletFallback ? [wallet.injected({ chains })] : []),\n    ],\n  },\n]);\n```\n\n#### Ledger Live\n\n```tsx\nimport { wallet } from '@rainbow-me/rainbowkit';\n\nwallet.ledger(options: {\n  chains: Chain[];\n  infuraId?: string;\n});\n```\n\n#### MetaMask\n\n```tsx\nimport { wallet } from '@rainbow-me/rainbowkit';\n\nwallet.metaMask(options: {\n  chains: Chain[];\n  shimDisconnect?: boolean;\n});\n```\n\n#### Rainbow\n\n```tsx\nimport { wallet } from '@rainbow-me/rainbowkit';\n\nwallet.rainbow(options: {\n  chains: Chain[];\n});\n```\n\n#### Trust Wallet\n\n```tsx\nimport { wallet } from '@rainbow-me/rainbowkit';\n\nwallet.trust(options: {\n  chains: Chain[];\n});\n```\n\n#### WalletConnect\n\nThis is a fallback wallet option designed for other WalletConnect-based wallets that haven’t been provided by another wallet in the list.\n\n```tsx\nimport { wallet } from '@rainbow-me/rainbowkit';\n\nwallet.walletConnect(options: {\n  chains: Chain[];\n});\n```\n\n### Creating custom wallets\n\n> ⚠️ Note: This API is unstable and likely to change in the near future. We will be adding more built-in wallets over time, so let us know if there are any particular wallets you’re interested in.\n\nThe `Wallet` type is provided to help you define your own custom wallets. If you’d like to see some working examples, you can [view the source code for the built-in wallets.](/packages/rainbowkit/src/wallets/walletConnectors/)\n\n#### `Wallet` properties\n\n<table>\n  <thead>\n    <tr>\n    <th>Property</th>\n    <th width=\"150\">Type</th>\n    <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>id</code></td>\n      <td><code>string</code></td>\n      <td>Unique ID per wallet</td>\n    </tr>\n    <tr>\n      <td><code>name</code></td>\n      <td><code>string</code></td>\n      <td>Human-readable wallet name</td>\n    </tr>\n    <tr>\n      <td><code>shortName</code></td>\n      <td><code>string | undefined</code></td>\n      <td>Optional short name for mobile use</td>\n    </tr>\n    <tr>\n      <td><code>iconUrl</code></td>\n      <td><code>string | (() => Promise&lt;string>)</code></td>\n      <td>URL for wallet icon, or a promise that resolves to a Base64 data URL (to support bundling lazy-loadable images in JavaScript when publishing to npm)</td>\n    </tr>\n    <tr>\n      <td><code>iconBackground</code></td>\n      <td><code>string</code></td>\n      <td>Background color while the wallet icon loads</td>\n    </tr>\n    <tr>\n      <td><code>installed</code></td>\n      <td><code>boolean | undefined</code></td>\n      <td>Whether the wallet is known to be installed, or <code>undefined</code> if indeterminate</td>\n    </tr>\n    <tr>\n      <td><code>downloadUrls</code></td>\n      <td><code>{ android?: string, ios?: string, browserExtension?: string, qrCode?: string } | undefined</code></td>\n      <td>Object containing download URLs</td>\n    </tr>\n    <tr>\n      <td><code>createConnector</code></td>\n      <td><code>(connectorArgs: { chainId? number }) => RainbowKitConnector</code></td>\n      <td>Function for providing the connector instance and configuration for different connection methods, described below</td>\n    </tr>\n  </tbody>\n</table>\n\n#### `RainbowKitConnector` properties\n\nThe following properties are defined on the return value of the `createConnector` function.\n\n<table>\n  <thead>\n    <tr>\n    <th>Property</th>\n    <th width=\"150\">Type</th>\n    <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>connector</code></td>\n      <td><code>Connector</code></td>\n      <td>Instance of a <a href=\"https://wagmi.sh/guides/connectors\">wagmi connector</a></td>\n    </tr>\n    <tr>\n      <td><code>desktop</code></td>\n      <td><code>{ getUri?: () => Promise&lt;string> } | undefined</code></td>\n      <td>Function for resolving a desktop wallet connection URI</td>\n    </tr>\n    <tr>\n      <td><code>mobile</code></td>\n      <td><code>{ getUri?: () => Promise&lt;string> } | undefined</code></td>\n      <td>Function for resolving a mobile wallet connection URI</td>\n    </tr>\n    <tr>\n      <td><code>qrCode</code></td>\n      <td><code>{ getUri: () => Promise&lt;string>, instructions?: { learnMoreUrl: string, steps: Array&lt;{ step: 'install' | 'create' | 'scan', title: string, description: string }&gt; }}} | undefined</code></td>\n      <td>Object containing a function for resolving the QR code URI, plus optional setup instructions an an icon URL if different from the wallet icon</td>\n    </tr>\n  </tbody>\n</table>\n\n### Customizing your app’s info\n\nYou can pass your app’s info in the `appInfo` prop for `RainbowKitProvider`. Properties you can modify are your app's name (`appName`) and the link where the “Learn More” button in the connection modal redirects to (`learnMoreUrl`):\n\n```tsx\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      appInfo={{\n        appName: 'Rainbowkit Demo',\n        learnMoreUrl: 'https://learnaboutcryptowallets.example',\n      }}\n      {...etc}\n    >\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n<table>\n  <thead>\n    <tr>\n    <th>Property</th>\n    <th width=\"150\">Type</th>\n    <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>learnMoreUrl?</code></td>\n      <td><code>string | undefined</code></td>\n      <td>Introductory “Learn more” link within the “What is a wallet?” button on the connection modal. Defaults to `https://learn.rainbow.me/what-is-a-cryptoweb3-wallet-actually`.</td>\n    </tr>\n    <tr>\n      <td><code>appName?</code></td>\n      <td><code>string | undefined</code></td>\n      <td>Name of your app. Will be displayed in certain places in the RainbowKit UI to refer to your site. Defaults to `undefined`, if left this way we will refer to your site as `\"Your App\"`.</td>\n    </tr>\n  </tbody>\n</table>\n\n### Enable cool mode\n\n```tsx\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider coolMode={true} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n## License\n\n[MIT.](./LICENSE.md)\n"
}