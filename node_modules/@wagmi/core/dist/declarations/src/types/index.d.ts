import { BlockExplorer, BlockExplorerName, RpcProviderName, units } from '../constants';
export declare type Chain = {
    id: number;
    name: AddEthereumChainParameter['chainName'];
    nativeCurrency?: AddEthereumChainParameter['nativeCurrency'];
    rpcUrls: {
        [key in RpcProviderName]?: string;
    } & {
        [key: string]: string;
        default: string;
    };
    blockExplorers?: {
        [key in BlockExplorerName]: BlockExplorer;
    } & {
        [key: string]: BlockExplorer;
        default: BlockExplorer;
    };
    testnet?: boolean;
};
export declare type Unit = typeof units[number];
declare global {
    type AddEthereumChainParameter = {
        chainId: string;
        chainName: string;
        nativeCurrency?: {
            name: string;
            symbol: string;
            decimals: number;
        };
        rpcUrls: string[];
        blockExplorerUrls?: string[];
        iconUrls?: string[];
    };
    type WatchAssetParams = {
        type: 'ERC20';
        options: {
            address: string;
            decimals: number;
            image?: string;
            symbol: string;
        };
    };
    type InjectedProviderFlags = {
        isBraveWallet?: true;
        isCoinbaseWallet?: true;
        isFrame?: true;
        isMetaMask?: true;
        isOpera?: true;
        isTally?: true;
        isTokenary?: true;
        isTrust?: true;
    };
    type InjectedProviders = InjectedProviderFlags & {
        isMetaMask: true;
        /** Only exists in MetaMask as of 2022/04/03 */
        _events: {
            connect?: () => void;
        };
        /** Only exists in MetaMask as of 2022/04/03 */
        _state?: {
            accounts?: string[];
            initialized?: boolean;
            isConnected?: boolean;
            isPermanentlyDisconnected?: boolean;
            isUnlocked?: boolean;
        };
    };
    interface Ethereum extends InjectedProviders {
        on?: (...args: any[]) => void;
        removeListener?: (...args: any[]) => void;
        providers?: Ethereum[];
        request(args: {
            method: 'eth_accounts';
        }): Promise<string[]>;
        request(args: {
            method: 'eth_chainId';
        }): Promise<string>;
        request(args: {
            method: 'eth_requestAccounts';
        }): Promise<string[]>;
        request(args: {
            method: 'personal_sign';
            params: [string, string];
        }): Promise<string>;
        request(args: {
            method: 'wallet_addEthereumChain';
            params: AddEthereumChainParameter[];
        }): Promise<null>;
        request(args: {
            method: 'wallet_switchEthereumChain';
            params: [{
                chainId: string;
            }];
        }): Promise<null>;
        request(args: {
            method: 'wallet_watchAsset';
            params: WatchAssetParams;
        }): Promise<boolean>;
        request(args: {
            method: 'web3_clientVersion';
        }): Promise<string>;
    }
    interface Window {
        ethereum?: Ethereum;
    }
    interface ProviderRpcError extends Error {
        code: 4001 | 4902;
        data?: unknown;
        message: string;
    }
}
