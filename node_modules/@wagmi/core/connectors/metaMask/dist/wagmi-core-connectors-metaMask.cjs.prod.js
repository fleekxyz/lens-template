'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classPrivateMethodGet = require('../../../dist/classPrivateMethodGet-d7330ed7.cjs.prod.js');
var base = require('../../../dist/base-59f3457e.cjs.prod.js');
var client = require('../../../dist/client-1f6fd5b6.cjs.prod.js');
require('eventemitter3');
require('ethers');
require('zustand/vanilla');
require('zustand/middleware');
require('ethers/lib/utils');

var _provider = /*#__PURE__*/new WeakMap();

var _getReady = /*#__PURE__*/new WeakSet();

var _findProvider = /*#__PURE__*/new WeakSet();

class MetaMaskConnector extends client.InjectedConnector {
  constructor(config) {
    super({ ...config,
      options: {
        name: 'MetaMask',
        shimDisconnect: true,
        ...(config === null || config === void 0 ? void 0 : config.options)
      }
    });

    classPrivateMethodGet._classPrivateMethodInitSpec(this, _findProvider);

    classPrivateMethodGet._classPrivateMethodInitSpec(this, _getReady);

    base._defineProperty(this, "id", 'metaMask');

    base._defineProperty(this, "ready", typeof window != 'undefined' && !!classPrivateMethodGet._classPrivateMethodGet(this, _findProvider, _findProvider2).call(this, window.ethereum));

    base._classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
  }

  async getProvider() {
    if (typeof window !== 'undefined') {
      // TODO: Fallback to `ethereum#initialized` event for async injection
      // https://github.com/MetaMask/detect-provider#synchronous-and-asynchronous-injection=
      base._classPrivateFieldSet(this, _provider, classPrivateMethodGet._classPrivateMethodGet(this, _findProvider, _findProvider2).call(this, window.ethereum));
    }

    return base._classPrivateFieldGet(this, _provider);
  }

}

function _getReady2(ethereum) {
  const isMetaMask = !!(ethereum !== null && ethereum !== void 0 && ethereum.isMetaMask);
  if (!isMetaMask) return; // Brave tries to make itself look like MetaMask
  // Could also try RPC `web3_clientVersion` if following is unreliable

  if (ethereum.isBraveWallet && !ethereum._events && !ethereum._state) return;
  if (ethereum.isTokenary) return;
  return ethereum;
}

function _findProvider2(ethereum) {
  if (ethereum !== null && ethereum !== void 0 && ethereum.providers) return ethereum.providers.find(classPrivateMethodGet._classPrivateMethodGet(this, _getReady, _getReady2));
  return classPrivateMethodGet._classPrivateMethodGet(this, _getReady, _getReady2).call(this, ethereum);
}

exports.MetaMaskConnector = MetaMaskConnector;
