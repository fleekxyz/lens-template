interface Peek<T> {
    peek: () => IteratorResult<T, undefined>;
}
interface AsyncPeek<T> {
    peek: () => Promise<IteratorResult<T, undefined>>;
}
interface Push<T> {
    push: (value: T) => void;
}
declare type Peekable<T> = Iterable<T> & Peek<T> & Push<T> & Iterator<T>;
declare type AsyncPeekable<T> = AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>;
export default function peekableIterator<I = Iterable<any> | AsyncIterable<any>>(iterable: I): I extends Iterable<infer T> ? Peekable<T> : I extends AsyncIterable<infer T> ? AsyncPeekable<T> : never;
export {};
//# sourceMappingURL=index.d.ts.map