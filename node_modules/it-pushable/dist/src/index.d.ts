import { Next } from './fifo.js';
interface BasePushable<T> {
    end: (err?: Error) => this;
    push: (value: T) => this;
    next: () => Promise<Next<T>>;
    return: () => {
        done: boolean;
    };
    throw: (err: Error) => {
        done: boolean;
    };
    /**
     * This property contains the number of bytes (or objects) in the queue ready to be read
     */
    readableLength: number;
}
export interface Pushable<T> extends AsyncIterable<T>, BasePushable<T> {
}
export interface PushableV<T> extends AsyncIterable<T[]>, BasePushable<T> {
}
export interface Options {
    objectMode?: boolean;
    onEnd?: (err?: Error) => void;
}
export interface ObjectPushableOptions extends Options {
    objectMode: true;
}
export interface BytePushableOptions extends Options {
    objectMode?: false;
}
export declare function pushable<T extends {
    byteLength: number;
} = Uint8Array>(options?: BytePushableOptions): Pushable<T>;
export declare function pushable<T>(options: ObjectPushableOptions): Pushable<T>;
export declare function pushableV<T extends {
    byteLength: number;
} = Uint8Array>(options?: BytePushableOptions): PushableV<T>;
export declare function pushableV<T>(options: ObjectPushableOptions): PushableV<T>;
export {};
//# sourceMappingURL=index.d.ts.map