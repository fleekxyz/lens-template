{"version":3,"file":"react-query-core.development.js","sources":["../src/core/subscribable.ts","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/logger.ts","../src/core/notifyManager.ts","../src/core/removable.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/core/hydration.ts"],"sourcesContent":["type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.push(listener as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs<\n  TFilters extends MutationFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, mutationKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(a, b)\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void) {\n  sleep(0).then(callback)\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => void\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch(error => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn?.()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n","export interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\nexport const defaultLogger: Logger = console\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = callback => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000)\n    )\n  }\n\n  protected clearGcTimeout() {\n    clearTimeout(this.gcTimeout!)\n    this.gcTimeout = undefined\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import {\n  getAbortController,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n  FetchStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer, isCancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  notifySuccess?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.meta = config.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.meta = options?.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    data: TData,\n    options?: SetDataOptions & { notifySuccess: boolean }\n  ): TData {\n    const prevData = this.state.data\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      notifySuccess: options?.notifySuccess,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: data => {\n        if (typeof data === 'undefined') {\n          onError(new Error('Query data cannot be undefined') as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: state.fetchFailureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            fetchFailureCount: 0,\n            isInvalidated: false,\n            fetchStatus: 'idle',\n            status: 'success',\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasInitialData = typeof options.initialData !== 'undefined'\n\n  const initialDataUpdatedAt = hasInitialData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  const hasData = typeof data !== 'undefined'\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta,\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, Retryer, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n  meta: MutationMeta | undefined\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n    this.meta = config.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: () => {\n          this.dispatch({ type: 'failed' })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: state.failureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n","import { MutationObserver } from './mutationObserver'\nimport type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Action, Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>\n  ) => void\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ninterface NotifyEventMutationAdded {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationUpdated {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n      meta: options.meta,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\n\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\nimport { getAbortController } from './utils'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        const abortController = getAbortController()\n        const abortSignal = abortController?.signal\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            signal: abortSignal,\n            pageParam: param,\n            meta: context.meta,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page =>\n            buildNewPages(pages, param, page, previous)\n          )\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i])\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        context.signal?.addEventListener('abort', () => {\n          cancelled = true\n          abortController?.abort()\n        })\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n  functionalUpdate,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport { defaultLogger, Logger } from './logger'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData> | undefined,\n    options?: SetDataOptions\n  ): TData | undefined {\n    const query = this.queryCache.find<TData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, notifySuccess: false })\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ])\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter(query => !query.isDisabled())\n        .map(query =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          })\n        )\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find(x =>\n      partialMatchKey(queryKey, x.queryKey)\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x =>\n        partialMatchKey(queryKey, x.queryKey)\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several query defaults match with key '${JSON.stringify(\n              queryKey\n            )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find(x =>\n      partialMatchKey(mutationKey, x.mutationKey)\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x =>\n        partialMatchKey(mutationKey, x.mutationKey)\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n              mutationKey\n            )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private previousSelectError: TError | null\n  private previousSelect?: {\n    fn: (data: TQueryData) => TData\n    result: TData\n  }\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.previousSelectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId!)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId!)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.previousSelect?.fn &&\n        !this.previousSelectError\n      ) {\n        data = this.previousSelect.result\n      } else {\n        try {\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n          this.previousSelect = {\n            fn: options.select,\n            result: data,\n          }\n          this.previousSelectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          error = selectError as TError\n          this.previousSelectError = selectError as TError\n          errorUpdatedAt = Date.now()\n          status = 'error'\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(\n                prevResult?.data,\n                placeholderData\n              )\n            }\n            this.previousSelectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            error = selectError as TError\n            this.previousSelectError = selectError as TError\n            errorUpdatedAt = Date.now()\n            status = 'error'\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = action.notifySuccess ?? true\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect']\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach(match =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions)\n      )\n\n      const newObservers = newObserverMatches.map(match => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map(observer => [observer.options.queryHash, observer])\n      )\n      const newResult = newObservers.map(observer =>\n        observer.getCurrentResult()\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index]\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map(match =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions)\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[]\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map(options =>\n      this.client.defaultQueryOptions(options)\n    )\n\n    const matchingObservers: QueryObserverMatch[] = defaultedQueryOptions.flatMap(\n      defaultedOptions => {\n        const match = prevObservers.find(\n          observer => observer.options.queryHash === defaultedOptions.queryHash\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      }\n    )\n\n    const matchedQueryHashes = matchingObservers.map(\n      match => match.defaultedQueryOptions.queryHash\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      defaultedOptions =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash)\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      prevObserver =>\n        !matchingObservers.some(match => match.observer === prevObserver)\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      }\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport {\n  NotifyOptions,\n  ObserverFetchOptions,\n  QueryObserver,\n} from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {}\n): DehydratedState {\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n"],"names":["Subscribable","constructor","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","undefined","functionalUpdate","updater","input","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","mutationKey","hashQueryKey","status","hashFn","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","Array","isArray","aSize","bItems","bSize","equalItems","i","shallowEqualObjects","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","isError","Error","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","getAbortController","AbortController","FocusManager","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","focused","setFocused","forEach","isFocused","document","includes","visibilityState","focusManager","OnlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","shouldPause","onSuccess","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","retry","retryDelay","delay","shouldRetry","onFail","continue","defaultLogger","console","createNotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","originalQueue","setNotifyFunction","setBatchNotifyFunction","notifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","getDefaultState","meta","remove","setData","data","prevData","isDataEqual","structuralSharing","dispatch","dataUpdatedAt","notifySuccess","setState","setStateOptions","retryer","reset","observer","enabled","isDisabled","getObserversCount","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","process","env","NODE_ENV","abortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","fetchFn","context","behavior","onFetch","revertState","fetchMeta","isFetchingOptimistic","action","reducer","fetchFailureCount","dataUpdateCount","errorUpdateCount","errorUpdatedAt","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","QueryCache","queries","queriesMap","build","client","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","executeMutation","mutationFn","variables","restored","onMutate","onSettled","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","abortSignal","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","manual","queryFnResult","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","shouldFetchNextPage","finalPromise","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isFetching","isMutating","getQueryData","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","parsedOptions","defaultedOptions","setQueriesData","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","refetchType","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","matchingDefaults","setMutationDefaults","_defaulted","refetchOnReconnect","useErrorBoundary","suspense","QueryObserver","trackedProps","Set","previousSelectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","time","staleTimeoutId","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","previousSelect","selectError","placeholderData","isLoading","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","typedKey","changed","has","shouldLoadOnMount","retryOnMount","refetchOnMount","field","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","newObserversMap","fromEntries","newResult","hasIndexChange","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","sortMatchesByOrderOfQueries","concat","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","isIdle","dehydrateMutation","dehydrateQuery","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","dehydrate","dehydrateMutations","shouldDehydrateMutation","dehydrateQueries","shouldDehydrateQuery","hydrate","dehydratedState","dehydratedMutation","dehydratedQuery"],"mappings":"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"}