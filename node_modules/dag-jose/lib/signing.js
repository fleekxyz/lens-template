import { fromBase64url, toBase64url } from './utils.js';
import { CID } from 'multiformats/cid';
export function fromSplit(split) {
    const [protectedHeader, payload, signature] = split;
    return {
        payload,
        signatures: [{ protected: protectedHeader, signature }],
        link: CID.decode(fromBase64url(payload)),
    };
}
function encodeSignature(signature) {
    const encoded = {
        signature: fromBase64url(signature.signature),
    };
    if (signature.header)
        encoded.header = signature.header;
    if (signature.protected)
        encoded.protected = fromBase64url(signature.protected);
    return encoded;
}
export function encode(jws) {
    const payload = fromBase64url(jws.payload);
    try {
        CID.decode(payload);
    }
    catch (e) {
        throw new Error('Not a valid DagJWS');
    }
    return {
        payload,
        signatures: jws.signatures.map(encodeSignature),
    };
}
function decodeSignature(encoded) {
    const sign = {
        signature: toBase64url(encoded.signature),
    };
    if (encoded.header)
        sign.header = encoded.header;
    if (encoded.protected)
        sign.protected = toBase64url(encoded.protected);
    return sign;
}
export function decode(encoded) {
    const decoded = {
        payload: toBase64url(encoded.payload),
        signatures: encoded.signatures.map(decodeSignature),
    };
    decoded.link = CID.decode(new Uint8Array(encoded.payload));
    return decoded;
}
//# sourceMappingURL=signing.js.map